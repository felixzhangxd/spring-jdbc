package biz.ezcom.spring.jdbc.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;

import biz.ezcom.spring.jdbc.dao.api.IUserDao;
import biz.ezcom.spring.jdbc.po.User;

@Repository
public class UserDao implements IUserDao {
    @Resource
    private JdbcTemplate jdbcTemplate;

    @Override
    public int save(final User user) {
        StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO t_user");
        sql.append(" SET id=?");
        sql.append(",name=?");
        sql.append(",password=?");
        return jdbcTemplate.update(sql.toString(), new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setInt(1, user.getId());
                ps.setString(2, user.getName());
                ps.setString(3, user.getPassword());
            }
        });
    }

    @Override
    public int saveAutoGeneratedKey(final User user) {
        final StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO t_user");
        sql.append(" SET name=?");
        sql.append(",password=?");
        KeyHolder keyHolder = new GeneratedKeyHolder();
        int affect = jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, user.getName());
                ps.setString(2, user.getPassword());
                return ps;
            }
        }, keyHolder);
        user.setId(keyHolder.getKey().intValue());
        return affect;
    }

    @Override
    public int[] save(final List<User> users) {
        final StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO t_user");
        sql.append(" SET id=?");
        sql.append(",name=?");
        sql.append(",password=?");
        return jdbcTemplate.batchUpdate(sql.toString(), new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                User user = users.get(i);
                ps.setInt(1, user.getId());
                ps.setString(2, user.getName());
                ps.setString(3, user.getPassword());
            }

            @Override
            public int getBatchSize() {
                return users.size();
            }
        });
    }

    @Override
    public int remove(Integer id) {
        String sql = "DELETE FROM t_user WHERE id=?";
        return jdbcTemplate.update(sql, id);
    }

    @Override
    public int modify(User user) {
        String sql = "UPDATE t_user SET name=?,password=? WHERE id=?";
        return jdbcTemplate.update(sql, user.getName(), user.getPassword(), user.getId());
    }

    @Override
    public int[] modifys(final List<User> users) {
        String sql = "UPDATE t_user SET name=?,password=? WHERE id=?";
        int[] updateCounts = jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                User user = users.get(i);
                ps.setString(1, user.getName());
                ps.setString(2, user.getPassword());
                ps.setInt(3, user.getId());
            }

            @Override
            public int getBatchSize() {
                return users.size();
            }
        });
        return updateCounts;
    }

    @Override
    public Map<String, Object> findMapById(Integer id) {
        // 必需返回1条记录,否则出异常
        String sql = "SELECT * FROM t_user WHERE id=?";
        return jdbcTemplate.queryForMap(sql, id);
    }

    @Override
    public SqlRowSet findSqlRowSetById(Integer id) {
        // 得到一个结果集
        String sql = "SELECT * FROM t_user WHERE id=?";
        return jdbcTemplate.queryForRowSet(sql, id);
    }

    @Override
    public String findUsernameById(Integer id) {
        // 必需返回一条记录,否则出异常
        String sql = "SELECT name FROM t_user WHERE id=?";
        return jdbcTemplate.queryForObject(sql, String.class, id);
    }

    @Override
    public User findUserById(Integer id) {
        // 必需返回一条记录,否则出异常
        String sql = "SELECT * FROM t_user WHERE id=?";
        return jdbcTemplate.queryForObject(sql, ParameterizedBeanPropertyRowMapper.newInstance(User.class), id);
    }

    @Override
    public List<Map<String, Object>> findMaps() {
        String sql = "SELECT * FROM t_user";
        return jdbcTemplate.queryForList(sql);
    }

    @Override
    public List<Integer> findIdsByManagerId(Integer managerId) {
        // queryForList不能返回复杂类型,但是可以放入Map
        String sql = "SELECT id FROM t_user WHERE manager_id=?";
        return jdbcTemplate.queryForList(sql, Integer.class, managerId);
    }

    @Override
    public List<User> findUsersByRowMapper() {
        String sql = "SELECT * FROM t_user";
        return jdbcTemplate.query(sql, ParameterizedBeanPropertyRowMapper.newInstance(User.class));
    }

    @Override
    public List<User> findUsersByRowCallbackHandler() {
        String sql = "SELECT * FROM t_user";
        final List<User> users = new ArrayList<User>();
        jdbcTemplate.query(sql, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                User user = new User();
                ResultSetMetaData metaDate = rs.getMetaData();
                for (int i = 1; i <= metaDate.getColumnCount(); i++) {
                    final String columnName = metaDate.getColumnName(i);
                    if ("id".equals(columnName)) {
                        user.setId(rs.getInt(i));
                    } else if ("name".equals(columnName)) {
                        user.setName(rs.getString(i));
                    } else if ("password".equals(columnName)) {
                        user.setPassword(rs.getString(i));
                    }
                }
                users.add(user);
            }
        });
        return users;
    }

    @Override
    public List<User> findUsersByResultSetExtractor() {
        String sql = "SELECT * FROM t_user";
        return jdbcTemplate.query(sql, new ResultSetExtractor<List<User>>() {
            @Override
            public List<User> extractData(ResultSet rs) throws SQLException, DataAccessException {
                List<User> users = new ArrayList<User>();
                ResultSetMetaData metaDate = rs.getMetaData();
                while (rs.next()) {
                    User user = new User();
                    for (int i = 1; i <= metaDate.getColumnCount(); i++) {
                        final String columnName = metaDate.getColumnName(i);
                        if ("id".equals(columnName)) {
                            user.setId(rs.getInt(i));
                        } else if ("name".equals(columnName)) {
                            user.setName(rs.getString(i));
                        } else if ("password".equals(columnName)) {
                            user.setPassword(rs.getString(i));
                        }
                    }
                    users.add(user);
                }
                return users;
            }
        });
    }
}
