package biz.ezcom.spring.jdbc.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import biz.ezcom.spring.jdbc.dao.api.IUserDao;
import biz.ezcom.spring.jdbc.po.User;

@Repository
public class UserDao implements IUserDao {
    @Resource
    private JdbcTemplate jdbcTemplate;

    @Override
    public int save(final User user) {
        String sql = "INSERT INTO t_user (id,username, password, birthday) VALUES(?,?,?,?)";
        return jdbcTemplate.update(sql, new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setInt(1, user.getId());
                ps.setString(2, user.getUsername());
                ps.setString(3, user.getPassword());
                ps.setDate(4, user.getBirthday());
            }
        });
    }
    
    @Override
    public int saveAutoGeneratedKey(final User user) {
        final String sql = "INSERT INTO t_user (username, password, birthday) VALUES(?,?,?)";
        KeyHolder keyHolder = new GeneratedKeyHolder();
        int affect = jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(sql, new String[] { "id" });
                ps.setString(1, user.getUsername());
                ps.setString(2, user.getPassword());
                ps.setDate(3, user.getBirthday());
                return ps;
            }
        }, keyHolder);
        user.setId(keyHolder.getKey().intValue());
        return affect;
    }
    
    @Override
    public int[] save(final List<User> users){
        final String sql = "INSERT INTO t_user (id,username, password, birthday) VALUES(?,?,?,?)";
        return jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                User user = users.get(i);
                ps.setInt(1, user.getId());
                ps.setString(2, user.getUsername());
                ps.setString(3, user.getPassword());
                ps.setDate(4, user.getBirthday());
            }
            
            @Override
            public int getBatchSize() {
                return users.size();
            }
        });
    }
    
    @Override
    public int remove(Integer id) {
        String sql = "DELETE FROM t_user WHERE id=?";
        return jdbcTemplate.update(sql, id);
    }

    @Override
    public int modify(User user) {
        String sql = "UPDATE t_user SET username=?,password=?,birthday=? WHERE id=?";
        return jdbcTemplate.update(sql, user.getUsername(), user.getPassword(), user.getBirthday(), user.getId());
    }

    @Override
    public int[] modifys(final List<User> users) {
        String sql = "UPDATE t_user SET username=?,password=?,birthday=? WHERE id=?";
        int[] updateCounts = jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                User user = users.get(i);
                ps.setString(1, user.getUsername());
                ps.setString(2, user.getPassword());
                ps.setDate(3, user.getBirthday());
                ps.setInt(4, user.getId());
            }

            @Override
            public int getBatchSize() {
                return users.size();
            }
        });
        return updateCounts;
    }

    @Override
    public int findCount() {
        String sql = "SELECT count(*) FROM t_user";
        return jdbcTemplate.queryForObject(sql, int.class);
    }

    @Override
    public User find(Integer id) {
        String sql = "SELECT * FROM t_user WHERE id=?";
        return jdbcTemplate.queryForObject(sql, new User(), id);
    }
}
