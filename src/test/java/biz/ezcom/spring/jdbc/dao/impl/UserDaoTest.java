package biz.ezcom.spring.jdbc.dao.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.Resource;

import junit.framework.Assert;

import org.junit.runner.RunWith;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import biz.ezcom.spring.jdbc.dao.api.IUserDao;
import biz.ezcom.spring.jdbc.po.User;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "classpath:/spring/applicationContext-*.xml")
public class UserDaoTest {
    @Resource
    private IUserDao userDao;

    // @Test
    public void testSave() {
        User user = new User(2, "felix", "pass");
        int affect = userDao.save(user);
        Assert.assertEquals(1, affect);
    }

    // @Test
    public void testSaveAutoIncrement() {
        User user = new User(2, "felix", "pass");
        int affect = userDao.saveAutoGeneratedKey(user);
        System.out.println(user);
        Assert.assertEquals(1, affect);
    }

    // @Test
    public void testSaveList() {
        List<User> users = new ArrayList<User>(3);
        users.add(new User(11, "felix", "pass"));
        users.add(new User(12, "alice", "pass"));
        users.add(new User(13, "justin", "pass"));
        int[] affect = userDao.save(users);
        Assert.assertEquals(users.size(), affect.length);
    }

    // @Test
    public void testRemove() {
        Integer id = 1;
        int affect = userDao.remove(id);
        Assert.assertEquals(1, affect);
    }

    // @Test
    public void testModify() {
        User user = new User(1, "felix", "pass");
        int affect = userDao.modify(user);
        Assert.assertEquals(1, affect);
    }

    // @Test
    public void testModifys() {
        List<User> users = new ArrayList<User>();
        users.add(new User(1, "felix", "pass"));
        users.add(new User(2, "justin", "word"));
        int[] affect = userDao.modifys(users);
        for (int i : affect) {
            Assert.assertEquals(1, i);
        }
    }

    // @Test
    public void testFindMapById() {
        Integer id = 1;
        Map<String, Object> user = userDao.findMapById(id);
        for (Entry<String, Object> entry : user.entrySet()) {
            System.out.println(entry.getKey() + " : " + entry.getValue());
        }
    }

    // @Test
    public void testFindSqlRowSetById() {
        SqlRowSet srs = userDao.findSqlRowSetById(11);
        while (srs.next()) {
            Integer id = srs.getInt("id");
            String username = srs.getString("username");
            String password = srs.getString("password");
            System.out.println(new User(id, username, password));
        }
    }

    // @Test
    public void testFindUsernameById() {
        Integer id = 11;
        String username = userDao.findUsernameById(id);
        System.out.println(username);
    }

    // @Test
    public void testFindUserById() {
        Integer id = 11;
        User user = userDao.findUserById(id);
        System.out.println(user);
    }

    // @Test
    public void testFindMaps() {
        List<Map<String, Object>> users = userDao.findMaps();
        for (Map<String, Object> user : users) {
            for (Entry<String, Object> entry : user.entrySet()) {
                System.out.println(entry.getKey() + " : " + entry.getValue());
            }
            System.out.println();
        }
    }

    // @Test
    public void testFindIdsByManagerId() {
        List<Integer> ids = userDao.findIdsByManagerId(1);
        System.out.println(ids);
    }

    // @Test
    public void testFindUsersByRowMapper() {
        List<User> users = userDao.findUsersByRowMapper();
        for (User user : users) {
            System.out.println(user);
        }
    }

    // @Test
    public void testFindUsersByRowCallbackHandler() {
        List<User> users = userDao.findUsersByRowCallbackHandler();
        for (User user : users) {
            System.out.println(user);
        }
    }

    // @Test
    public void testFindUsersByResultSetExtractor() {
        List<User> users = userDao.findUsersByResultSetExtractor();
        for (User user : users) {
            System.out.println(user);
        }
    }
}
